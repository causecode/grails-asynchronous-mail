buildscript {
    ext {
        grailsVersion = project.grailsVersion
    }
    repositories {
        mavenLocal()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://repo.grails.org/grails/core" }
        mavenCentral()
    }
    dependencies {
        // Uncomment while publishing 
        //classpath "com.netflix.nebula:nebula-publishing-plugin:4.4.4"
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
    }
}

/*
plugins {
    id 'nebula.maven-publish' version '4.4.4'
}

project.publishing {
    publications {
        mavenJava(MavenPublication) {
            from project.components.java
            println "Removing dependencies without a version"

            pom.withXml {
                def pomNode = asNode()
                // version-less dependencies are handled with dependencyManagement
                pomNode.dependencies.dependency.findAll {
                    it.version.text().isEmpty()
                }.each {
                    it.replaceNode {}
                }
            }
        }
    }
    repositories {
        maven {
            credentials {
                username mavenUser
                password mavenPassword
            }
            url "http://maven-upload.causecode.com"
        }
    }
}
*/

version "2.0.0.RC2"
group "org.grails.plugins"

apply plugin: 'idea'
apply plugin:"org.grails.grails-plugin"
apply plugin:"org.grails.grails-plugin-publish"
apply plugin:"org.grails.grails-gsp"

ext {
    grailsVersion = project.grailsVersion
    gradleWrapperVersion = project.gradleWrapperVersion
}

repositories {
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
}

dependencyManagement {
    imports {
        mavenBom "org.grails:grails-bom:$grailsVersion"
    }
    applyMavenExclusions false
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-dependencies"
    compile "org.grails:grails-web-boot"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:scaffolding"
    console "org.grails:grails-console"
    profile "org.grails.profiles:web-plugin:$grailsVersion"
    provided "org.grails:grails-plugin-services"
    provided "org.grails:grails-plugin-domain-class"
    testCompile "org.grails:grails-plugin-testing"

    testCompile "org.grails.plugins:hibernate4"

    compile "org.grails.plugins:mail:2.0.0.RC6"
    compile "org.grails.plugins:quartz:2.0.8"
}

task wrapper(type: Wrapper) {
    gradleVersion = gradleWrapperVersion
}

grailsPublish {
    userOrg = 'kefirsf'
    license {
        name = 'Apache-2.0'
    }
    websiteUrl = 'https://grails.org/plugin/asynchronous-mail'
    issueTrackerUrl = 'https://github.com/kefirfromperm/grails-asynchronous-mail/issues'
    vcsUrl = 'https://github.com/kefirfromperm/grails-asynchronous-mail.git'
    title = "Grails Asynchronous Mail plugin"
    desc = "The plugin realises asynchronous mail sending. It stores messages in a DB and sends them asynchronously by a quartz job."
    developers = [
            kefirfromperm:"Vitalii Samolovskikh",
            stokito:"Sergey Ponomarev",
            ilopmar:"Iván López",
            burtbeckwith:"Burt Beckwith",
            puneetbehl:"Puneet Behl",
            aberbenni:"Alessandro Berbenni",
            dpcasady:"Danny Casady",
            SAgrawal14:"Shashank Agrawal",
            visheshd:"Vishesh",
            'micke-a':"Mikael Andersson"
    ]
}
